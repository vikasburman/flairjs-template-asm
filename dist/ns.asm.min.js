/**
 * @preserve
 * FlairJS Assembly Project Template
 * Boilerplate project structure for creating a flairjs assembly
 * 
 * Assembly: ns.asm
 *     File: ./ns.asm.js
 *  Version: 0.9.6
 *  Thu, 18 Jul 2019 03:59:25 GMT
 * 
 * (c) 2017-2019 Vikas Burman
 * MIT
 */
!function(e,s){"use strict";"function"==typeof!0&&(!0).amd?(!0)(s):"object"==typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=s),module.exports=exports=s):e["ns.asm"]=s}(this,async function(e,s){"use strict";const{Class:t,Struct:n,Enum:i,Interface:r,Mixin:a,Aspects:o,AppDomain:c,$$:$,attr:l,bring:m,Container:p,include:d,Port:u,on:f,post:g,telemetry:y,Reflector:b,Serializer:x,Tasks:A,as:S,is:v,isDefined:j,isComplies:T,isDerivedFrom:O,isAbstract:h,isSealed:C,isStatic:I,isSingleton:N,isDeprecated:B,isImplements:k,isInstanceOf:z,isMixed:P,getAssembly:D,getAttr:M,getContext:w,getResource:E,getRoute:F,getType:J,ns:R,getTypeOf:L,getTypeName:V,typeOf:U,dispose:G,using:W,Args:q,Exception:H,noop:K,nip:Q,nim:X,nie:Y,event:Z}=e,{TaskInfo:_}=e.Tasks,{env:ee}=e.options,{guid:se,forEachAsync:te,replaceAll:ne,splitAndTrim:ie,findIndexByProp:re,findItemByProp:ae,which:oe,isArrowFunc:ce,isASyncFunc:$e,sieve:le,deepMerge:me,getLoadedScript:pe,b64EncodeUnicode:de,b64DecodeUnicode:ue}=e.utils,{$$static:fe,$$abstract:ge,$$virtual:ye,$$override:be,$$sealed:xe,$$private:Ae,$$privateSet:Se,$$protected:ve,$$protectedSet:je,$$readonly:Te,$$async:Oe,$$overload:he,$$enumerate:Ce,$$dispose:Ie,$$post:Ne,$$on:Be,$$timer:ke,$$type:ze,$$args:Pe,$$inject:De,$$resource:Me,$$asset:we,$$singleton:Ee,$$serialize:Fe,$$deprecate:Je,$$session:Re,$$state:Le,$$conditional:Ve,$$noserialize:Ue,$$ns:Ge}=$,We=ee.isServer||ee.isWorker?null:(!0).document,qe=c.context.current().name,He=s,Ke=He.substr(0,He.lastIndexOf("/")+1);c.loadPathOf("ns.asm",Ke);let Qe=JSON.parse('{"settingName":"defaultSettingValue"}'),Xe=e.Port("settingsReader");if("function"==typeof Xe){let e=Xe("ns.asm");e&&(Qe=me([Qe,e],!1))}Qe=Object.freeze(Qe);let Ye=JSON.parse("{}");Ye=Object.freeze(Ye);let Ze=()=>{};return c.context.current().currentAssemblyBeingLoaded("./ns.asm{.min}.js"),await(async()=>{$("ns","ns.asm"),t("ClassName1",function(){})})(),await(async()=>{$("ns","ns.asm.something"),t("ClassName2",function(){})})(),c.context.current().currentAssemblyBeingLoaded(""),c.registerAdo('{"name":"ns.asm","file":"./ns.asm{.min}.js","package":"flairjs-template-asm","desc":"Boilerplate project structure for creating a flairjs assembly","title":"FlairJS Assembly Project Template","version":"0.9.6","lupdate":"Thu, 18 Jul 2019 03:59:25 GMT","builder":{"name":"flairBuild","version":"1","format":"fasm","formatVersion":"1","contains":["init","func","type","vars","reso","asst","rout","sreg"]},"copyright":"(c) 2017-2019 Vikas Burman","license":"MIT","types":["ns.asm.ClassName1","ns.asm.something.ClassName2"],"resources":[],"assets":[],"routes":[]}'),Object.freeze({name:"ns.asm",settings:Qe,config:Ye})});